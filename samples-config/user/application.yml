dubbo:
  scan:
    base-packages: com.ascrud.cloud.samples.user.server
  protocols:
    dubbo:
      name: dubbo
      port: -1
    rest:
      name: rest
      port: 9090
      server: netty
  registry:
    #   The Spring Cloud Dubbo's registry extension
    #    address: nacos://${NACOS_SERVER_ADDR:192.168.0.135:8848}
    address: nacos://192.168.0.135:8848
  cloud:
    subscribed-services:
    #   The traditional Dubbo's registry
#   address: zookeeper://127.0.0.1:2181

server:
  port: ${SERVER_PORT:9095}

spring:
  application:
    name: user
  profiles:
    active: dev
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.0.135:8848
        namespace: ${NACOS_DISCOVERY_NAMESPACE:dev}
        username: ${NACOS_USERNAME:nacos}
        password: ${NACOS_PASSWORD:nacos}
      #        server-addr: ${NACOS_SERVER_ADDR:192.168.0.135:8848}
      #        username: ${NACOS_USERNAME:nacos}
      #        password: ${NACOS_PASSWORD:nacos}
      #        namespace: ${NACOS_DISCOVERY_NAMESPACE:dev}
  zipkin:
    anabled: false
    base-url: http://${ZIPKIN_HOST:192.168.88.87}:${ZIPKIN_PORT:9411}
    discovery-client-enabled: false
  sleuth:
    sampler:
      probability: 1
  data:
    jpa:
      repositories:
        bootstrap-mode: deferred
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://192.168.0.135:3306/sam_user?characterEncoding=utf-8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC
    username: root
    password: yhl1qaz2wsx
    #    username: ${MYSQL_USERNAME:root}
    #    password: ${MYSQL_PASSWORD:yhl1qaz2wsx}
    hikari:
      poolName: Hikari
      auto-commit: false
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    database: MYSQL
    show-sql: true
    properties:
      # hibernate.jdbc.time_zone: UTC
      hibernate.id.new_generator_mappings: true
      hibernate.connection.provider_disables_autocommit: true
      hibernate.cache.use_second_level_cache: false
      hibernate.cache.use_query_cache: false
      hibernate.generate_statistics: false
  #  boot:
  #    admin:
  #      client:
  #        url: http://${ADMIN_HOST:127.0.0.1}:${ADMIN_PORT:9093}
  #        username: ${ADMIN_USERNAME:admin}
  #        password: ${ADMIN_PASSWORD:admin}
  # 在 Spring Boot 中, 当用户访问了一个不存在的链接时, Spring 默认会将页面重定向到 **/error** 上, 而不会抛出异常.
  # 既然如此, 那我们就告诉 Spring Boot, 当出现 404 错误时, 抛出一个异常即可. 在 application.properties 中添加两个配置:
  mvc:
    throw-exception-if-no-handler-found: true
  resources:
    add-mappings: false

#eureka:
#  client:
#    security:
#      basic:
#        user: ${EUREKA_BASIC_USER:admin}
#        password: ${EUREKA_BASIC_PASSWORD:admin}
#    service-url:
#      defaultZone: http://${eureka.client.security.basic.user}:${eureka.client.security.basic.password}@${EUREKA_SERVER_HOST:127.0.0.1}:${EUREKA_SERVER_PORT:8762}/eureka/
#  instance:
#    metadata-map:
#      host-mark: running-host

logging:
  level:
    org.springframework.cloud.openfeign: debug

management:
  endpoints:
    web:
      exposure:
        include: "*"

swagger:
  authorization:
    key-name: 'Authorization'